// KaguOS kernel main code

// ##########################################
// # INITRAMFS_START                        #
// ##########################################
label kernel_entry_point

write "Operation register:" to INFO_REG_OP
write "A register:" to INFO_REG_A
write "B register:" to INFO_REG_B
write "C register:" to INFO_REG_C
write "D register:" to INFO_REG_D
write "Result register:" to INFO_REG_RES
write "Comparison result register:" to INFO_REG_BOOL_RES
write "Error register:" to INFO_REG_ERROR
write "Display buffer:" to INFO_DISPLAY_BUFFER
write "Display color:" to INFO_DISPLAY_COLOR
write "Keyboard buffer:" to INFO_KEYBOARD_BUFFER
write "Display background:" to INFO_DISPLAY_BACKGROUND
write "Program counter:" to INFO_PROGRAM_COUNTER
write "Free memory start:" to INFO_FREE_MEMORY_START
write "Free memory end:" to INFO_FREE_MEMORY_END
write "Free chunks:" to INFO_FREE_CHUNKS
write "" to FREE_CHUNKS

// Let's init pointer to the stack
//      var:sys_stack_ptr = FREE_MEMORY_END + 1
// Therefore on any push to stack we will decrement it
// If sys_stack_pop will be called incorrectly then we will get crashed
copy FREE_MEMORY_END to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:sys_stack_ptr

// init file system
copy PROGRAM_COUNTER to var:sys_return
jump label:sys_fs_init

// init system calls table and handler
copy PROGRAM_COUNTER to var:sys_return
jump label:sys_call_table_init

// Read system variables from config file
copy PROGRAM_COUNTER to var:sys_return
jump label:sys_read_config

// Allocate memory for system resources like file descriptors and process control blocks
copy PROGRAM_COUNTER to var:sys_return
jump label:sys_prepare_memory

// Setup interrupt handler:
write label:sys_interrupt_handler to REG_SYS_INTERRUPT_HANDLER
write "" to REG_SYS_INTERRUPT_DATA
write "-1" to REG_SYS_HW_TIMER

// Print welcome message
write "RAMFS init - done." to DISPLAY_BUFFER
write COLOR_GREEN to DISPLAY_COLOR
write OP_DISPLAY_LN to REG_OP
cpu_exec

// ##########################################
// # INITRAMFS_END                          #
// ##########################################


// ##########################################
// # KERNEL_START                           #
// ##########################################
    // # Display welcome message:
    write "Welcome to KaguOS" to DISPLAY_BUFFER
    write COLOR_GREEN to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec

    var exitStr
    write "exit" to var:exitStr

    var schedStr
    write "sched" to var:schedStr

label kernel_start
    // Display prompt to enter the value:
    copy var:sys_work_dir to DISPLAY_BUFFER
    write "" to DISPLAY_COLOR
    write OP_DISPLAY to REG_OP
    cpu_exec
    write " :) " to DISPLAY_BUFFER
    cpu_exec

    // read cmd from keyboard
    write OP_READ_INPUT to REG_OP
    write KEYBOARD_READ_LINE to REG_A
    cpu_exec

    // remove leading and duplicated spaces:
    copy KEYBOARD_BUFFER to REG_A
    copy PROGRAM_COUNTER to var:sys_return
    jump label:sys_remove_unneeded_spaces
    copy REG_RES to KEYBOARD_BUFFER

    // Get command name:
    var parsedCmd
    copy KEYBOARD_BUFFER to REG_A
    write 1 to REG_B
    write " " to REG_C
    write OP_GET_COLUMN to REG_OP
    cpu_exec
    copy REG_RES to var:parsedCmd


    // Check whether command is exit if not then jump to the start of the loop
    // otherwise we will go to the next instruction which is exit
    copy var:parsedCmd to REG_A
    copy var:exitStr to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:kernel_end

    // Check whether command is sched, if so then handle it to either load a program for further execution or run already scheduled programs
    copy var:parsedCmd to REG_A
    copy var:schedStr to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:sched_cmd

    // Check that command is not empty and exec corresponding file :
    copy var:parsedCmd to REG_A
    write "" to REG_B
    write OP_CMP_NEQ to REG_OP
    cpu_exec
    jump_if label:exec_file

    jump label:kernel_start




label sched_cmd
    copy KEYBOARD_BUFFER to REG_A
    write "sched -- " to REG_B
    write OP_STARTS_WITH to REG_OP
    cpu_exec
    jump_if label:do_sched_load

    // copy KEYBOARD_BUFFER to REG_A
    write "sched run" to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:do_sched_run

    jump label:do_sched_incorrect_arg

    label do_sched_load
        var do_sched_load_cmdline
        copy REG_RES to var:do_sched_load_cmdline
    
        // Load program for further execution:
        copy var:do_sched_load_cmdline to REG_A
        write 50 to REG_B // set priority of the process
        copy PROGRAM_COUNTER to var:sys_return
        jump label:sys_sched_process_load
        jump_err label:do_sched_file_error

        write "Successfully loaded: " to DISPLAY_BUFFER
        write COLOR_GREEN to DISPLAY_COLOR
        write OP_DISPLAY to REG_OP
        cpu_exec

        copy KEYBOARD_BUFFER to DISPLAY_BUFFER
        // write COLOR_GREEN to DISPLAY_COLOR
        write OP_DISPLAY_LN to REG_OP
        cpu_exec
        jump label:kernel_start

    label do_sched_run
        write "List of scheduled processes:" to DISPLAY_BUFFER
        write COLOR_NO to DISPLAY_COLOR
        write OP_DISPLAY_LN to REG_OP
        cpu_exec

        copy PROGRAM_COUNTER to var:sys_return
        jump label:sys_sched_print_all

        copy PROGRAM_COUNTER to var:sys_return
        jump label:sys_sched_run
        jump label:kernel_start

    label do_sched_incorrect_arg
        write "Incorrect parameters for sched:" to DISPLAY_BUFFER
        write COLOR_RED to DISPLAY_COLOR
        write OP_DISPLAY_LN to REG_OP
        cpu_exec
        write "Load program:          sched -- cmd arg1 arg2 arg3" to DISPLAY_BUFFER
        cpu_exec
        write "Run loaded tasks:      sched run" to DISPLAY_BUFFER
        cpu_exec
        jump label:kernel_start

    label do_sched_file_error
        copy REG_ERROR to DISPLAY_BUFFER
        write COLOR_RED to DISPLAY_COLOR
        write OP_DISPLAY_LN to REG_OP
        cpu_exec
        jump label:kernel_start

label exec_file
    // Load program for further execution:
    copy KEYBOARD_BUFFER to REG_A
    write 100 to REG_B // set process priority
    copy PROGRAM_COUNTER to var:sys_return
    jump label:sys_sched_process_load
    jump_err label:exec_file_error

    copy PROGRAM_COUNTER to var:sys_return
    jump label:sys_sched_run

    label exec_file_error
        copy REG_ERROR to DISPLAY_BUFFER
        write COLOR_RED to DISPLAY_COLOR
        write OP_DISPLAY_LN to REG_OP
        cpu_exec
        jump label:kernel_start


label kernel_end
    copy REG_ERROR to DISPLAY_BUFFER
    write COLOR_RED to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec

    // Print bye message and exit:
    write "Good bye!" to DISPLAY_BUFFER
    write COLOR_GREEN to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec

    write OP_HALT to REG_OP
    cpu_exec
// ##########################################
// # KERNEL_END                             #
// ##########################################
